{
	"info": {
		"_postman_id": "fbce30fa-e4e5-4bf6-a206-d50b14b98e34",
		"name": "Wordpress API v2",
		"description": "The WordPress REST API provides API endpoints for WordPress data types that allow developers to interact with sites remotely by sending and receiving JSON.\n\n# Why use the WordPress REST API\nThe WordPress REST API makes it easier than ever to use WordPress in new and exciting ways, such as creating Single Page Applications on top of WordPress. You could create a plugin to provide an entirely new admin experiences for WordPress, or create a brand new interactive front-end experience.\n\n# Key Concepts\nTo get started with using the WordPress REST API we will break down some of the key concepts and terms associated with the API:\n* Routes/Endpoints\n* Requests\n* Responses\n* Schema\n* Controller Classes\n\nEach of these concepts play a crucial role in using and understanding the WordPress REST API. Let’s briefly break them down so that we can later explore each in greater depth.\n\n# Routes & Endpoints\nA route, in the context of the WordPress REST API, is a URI which can be mapped to different HTTP methods. The mapping of an individual HTTP method to a route is known as an _“endpoint”_. To clarify: If we make a **GET** request to _http://oursite.com/wp-json/_, we will get a JSON response showing us what routes are available, and within each route, what endpoints are available. _/wp-json/_ is a route itself and when a **GET** request is made it matches to the endpoint that displays what is known as the index for the WordPress REST API. \n\n> Note:\n  If you’re using non-pretty permalinks, you should pass the REST API route as a query string parameter. The route http://oursite.com/wp-json/ in the example above would hence be http://oursite.com/?rest_route=/.\n\n\n# Schema\nEach endpoint requires and provides slightly different data structures, and those structures are defined in the API Schema. The schema structures API data and provides a comprehensive list of all of the properties the API can return and input parameters it can accept. \nSchema also provides security benefits for the API, as it enables us to validate the requests being made to the API. The Schema section further explores this large topic.\n\n# Authorization\n\nSome of the endpoints require special role permissions which may require more setup in your Wordpress instance, such as downloading a role permissions editor tool. \n\n# Cookie Authentication\nCookie authentication is the standard authentication method included with WordPress. When you log in to your dashboard, this sets up the cookies correctly for you, so plugin and theme developers need only to have a logged-in user.\n\nHowever, the REST API includes a technique called **_nonces_** to avoid CSRF issues. This prevents other sites from forcing you to perform actions without explicitly intending to do so. This requires slightly special handling for the API.\n\nFor developers using the built-in Javascript API, this is handled automatically for you. This is the recommended way to use the API for plugins and themes. Custom data models can extend **_wp.api.models.Base_** to ensure this is sent correctly for any custom requests.\n\nFor developers making manual Ajax requests, the **_nonce_** will need to be passed with each request. The API uses nonces with the action set to **_wp_rest**. These can then be passed to the API via the **_wpnonce** data parameter (either **POST** data or in the query for **GET** requests), or via the **X-WP-Nonce** header. If no nonce is provided the API will set the current user to 0, turning the request into an unauthenticated request, even if you’re logged into WordPress.\n\n> Note: Until recently, most software had spotty support for DELETE requests. For instance, PHP doesn’t   transform the request body of a DELETE request into a super global. As such, supplying the nonce as a   header is the most reliable approach.\n\nIt is important to keep in mind that this authentication method relies on **_WordPress cookies_**. As a result this method is only applicable when the REST API is used inside of WordPress and the current user is logged in. In addition, the current user must have the appropriate capability to perform the action being performed.\n\n\nWhile cookie authentication is the only authentication mechanism available natively within WordPress, plugins may be added to support alternative modes of authentication that will work from remote applications. Some example plugins are OAuth 1.0a Server, Application Passwords, and JSON Web Tokens.\n\n\n# Why is the REST API not verifying the incoming Origin header? Does this expose my site to CSRF attacks?\n**_Cross-Origin Resource Sharing (CORS)_** is a mechanism which allows a website to control which Origins (originating external sites) are allowed to access your site’s data. CORS prevents against a particular type of attack known as **_Cross-Site Request Forgery_**, or CSRF. However, WordPress has an existing CSRF protection mechanism which uses nonces. Tightening CORS restrictions would prevent some authentication methods, so the WordPress REST API uses nonces for CSRF protection instead of CORS.\n\nBecause the **_WordPress REST API does not verify the Origin header of incoming requests_**, public REST API endpoints may therefore be accessed from any site.\n\nThis is an intentional design decision, but if you wish to prevent your site from being accessed from unknown origins you may unhook the default **rest_send_cors_headers** function from the **rest_pre_serve_request** filter hook, then hook in your own function to that same filter to specify stricter CORS headers.\n\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "869033-fbce30fa-e4e5-4bf6-a206-d50b14b98e34"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "List Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var postNum = parseInt(pm.environment.get(\"postNum\"));",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of  posts\", () => {",
									"    let actualNum = pm.response.json().length;",
									"    pm.expect(actualNum).to.equal(postNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "64f7e7a5-cc3f-48c1-89c6-bc9cb70c3684"
							}
						}
					],
					"id": "0870897f-d980-4b7f-9675-f8527c242281",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/posts",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"posts"
							]
						},
						"description": "## List Posts\n| | |\n| :-- | :--\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page``` | Current page of collection.<br/>Default:**1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```after```|Limit response to posts published after a given ISO8601 compliant date.\n|```author```|Limit result set to posts assigned to specific authors.\n|```author_exclude```|Ensure result set excludes posts assigned to specific authors.\n|```before```|Limit response to posts published before a given ISO8601 compliant date.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|\tSort collection by object attribute.<br/>Default: **date**<br/>One of: **author, date, id, include, modified, parent, relevance, slug, include_slugs, title**\n|```slug```|Limit result set to posts with one or more specific slugs.\n|```status```|Limit result set to posts assigned one or more statuses.<br/>Default: **publish**\n|```categories```|Limit result set to all items that have the specified term assigned in the categories taxonomy.\n|```categories_exclude```|Limit result set to all items except those that have the specified term assigned in the categories taxonomy.\n|```tags```|Limit result set to all items that have the specified term assigned in the tags taxonomy.\n|```tags_exclude```|Limit result set to all items except those that have the specified term assigned in the tags taxonomy.\n|```sticky```|Limit result set to items that are sticky."
					},
					"response": []
				},
				{
					"name": "Create Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let excerpt = pm.environment.get('excerpt');",
									"let content = pm.environment.get('content');",
									"",
									"",
									"pm.environment.set(\"postId\", response.id);",
									"",
									"pm.test(\"Post is created\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(pm.response.json().title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Excerpt is correct\", () => {",
									"    pm.expect(pm.response.json().excerpt.raw).to.equal(excerpt);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(pm.response.json().content.raw).to.equal(content);",
									"});",
									"",
									"//set to rendered for title, excerpt, content to be tested against in retrieve",
									"pm.environment.set(\"title\", response.title.rendered);",
									"pm.environment.set(\"content\", response.content.rendered);",
									"pm.environment.set(\"excerpt\", response.excerpt.rendered);"
								],
								"type": "text/javascript",
								"id": "581409ab-fcd2-4f82-bc7e-47cc9882dbeb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"title\", \"Test WAPI Title\");",
									"pm.environment.set(\"content\", \"Test WAPI Post Content\");",
									"pm.environment.set(\"excerpt\", \"Test WAPI Excerpt\");"
								],
								"type": "text/javascript",
								"id": "f809de26-2295-4fc9-a63d-4f7d6560c1a3"
							}
						}
					],
					"id": "86dda42c-2ed7-41d0-9fcf-27305d30f7a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/posts?content={{content}}&title={{title}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "title",
									"value": "{{title}}"
								}
							]
						},
						"description": "| | |\n| :--- | :---\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug``` |An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```author```|The ID for the author of the object.\n|```excerpt```|The excerpt for the object.\n|```featured_media```|The ID of the featured media for the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```format```|The format for the object.<br/>One of: **standard, aside, chat, gallery, link, image, quote, status, video, audio**\n|```meta```|Meta fields.\n|```sticky```|Whether or not the object should be treated as sticky.\n|```template```|The theme file to use to display the object.\n|```categories```|The terms assigned to the object in the category taxonomy.\n|```tags```|The terms assigned to the object in the post_tag taxonomy."
					},
					"response": []
				},
				{
					"name": "Retrieve a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let excerpt = pm.environment.get('excerpt');",
									"let content = pm.environment.get('content');",
									"let postId = pm.environment.get(\"postId\");",
									"",
									"pm.test(\"Post is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(postId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.rendered).to.equal(title);",
									"});",
									"",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(response.content.rendered).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "27f3aacf-b1cb-4181-a528-313679702cbc"
							}
						}
					],
					"id": "ce33f036-4414-4121-ae09-50b4b871c279",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/posts/{{postId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"posts",
								"{{postId}}"
							]
						},
						"description": "| | |\n| :--- | :---\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```password```|The password for the post if it is password protected."
					},
					"response": []
				},
				{
					"name": "Update a Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"title\", \"Test WAPI Title Updated\");",
									"pm.environment.set(\"content\", \"Test WAPI Post Content Updated\");",
									"pm.environment.set(\"excerpt\", \"Test WAPI Excerpt Updated\");"
								],
								"type": "text/javascript",
								"id": "ae2df86b-482e-4e8a-bf19-28d596dee6e2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let excerpt = pm.environment.get('excerpt');",
									"let content = pm.environment.get('content');",
									"let postId = pm.environment.get(\"postId\");",
									"",
									"pm.test(\"Post is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(postId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Excerpt is correct\", () => {",
									"    pm.expect(response.excerpt.raw).to.equal(excerpt);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(response.content.raw).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "6627e64d-e35f-4952-a6da-e773636bca29"
							}
						}
					],
					"id": "0e86060b-4c31-42da-97df-2e4146da30f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/posts/{{postId}}?content={{content}}&title={{title}}&excerpt={{excerpt}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"posts",
								"{{postId}}"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "title",
									"value": "{{title}}"
								},
								{
									"key": "excerpt",
									"value": "{{excerpt}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```author```|The ID for the author of the object.\n|```excerpt```|The excerpt for the object.\n|```featured_media```|The ID of the featured media for the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```format```|The format for the object.<br/>One of: **standard, aside, chat, gallery, link, image, quote, status, video, audio**\n|```meta```|Meta fields.\n|```sticky```|Whether or not the object should be treated as sticky.\n|```template```|The theme file to use to display the object.\n|```categories```|The terms assigned to the object in the category taxonomy.\n|```tags```|The terms assigned to the object in the post_tag taxonomy."
					},
					"response": []
				},
				{
					"name": "Delete a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let postId = pm.environment.get(\"postId\");",
									"",
									"pm.test(\"Post is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(postId);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "73f1c390-fa78-42e2-9e72-ea21117d2798"
							}
						}
					],
					"id": "ac5211a7-f630-42ac-b801-4cb3804f5968",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/posts/{{postId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"posts",
								"{{postId}}"
							]
						},
						"description": "| | |\n| :--- | :---\n|```id```|Unique identifier for the object.\n|```force```|Whether to bypass trash and force deletion."
					},
					"response": []
				}
			],
			"id": "cbf8cc93-0753-44eb-b975-4b12a8708fb1",
			"description": "## Schema\n``` The schema defines all the fields that exist for a post object. ```\n\n\n| |    |\n|:-|:- |\n|```date``` <br> datedatestring,datetime ([details](https://core.trac.wordpress.org/ticket/41032)) | The date the object was published, in the site's timezone. <br >Context: **view, edit, embed** |\n| ```date_gmt``` <br >string, datetime ([details](https://core.trac.wordpress.org/ticket/41032)) | The date the object was published, as GMT.<br />Context: **view, edit**\n|```guid``` <br /> object | The globally unique identifier for the object. <br />Read only<br />Context: **view, edit**\n| ```id``` <br /> integer |  Unique identifier for the object.<br /> Read Only <br /> Context: **view, edit, embed**\n| ```link``` <br /> string, uri | Url to the object. <br /> Read Only <br /> Context: **view, edit, embed**\n| ```modified``` <br /> string, datetime ([details](https://core.trac.wordpress.org/ticket/41032)) | The date the object was last modified, in the site's timezone. <br /> Read only <br /> Context: **view, edit**\n| modified_gmt <br /> string, datetime ([details](https://core.trac.wordpress.org/ticket/41032)) | The date the object was last modified, as GMT. <br /> Read only <br /> Context: **view, edit**\n| ```slug``` <br /> string | An alphanumeric identifier for the object unique to its type. <br /> Context: **view, edit**\n| ```status``` <br /> string | A named status for the object. <br /> Context: **view, edit** <br /> One of: **publish, future, draft, pending, private**\n| ```type``` <br /> string | Type of Post for the object. <br /> Read Only <br /> Context: **view, edit, embed**\n| ```password``` <br /> string | A password to protect access to the content and excerpt. <br/> Context: **edit**\n| ```permalink_template``` <br/> string | Permalink template for the object <br/> Read Only <br/> Context: **edit**\n| ```generated_slug``` <br/> string | Permalink template for the object. <br/> Read only <br/> Context: **edit**\n|```title``` <br/> object | The title for the object. <br/> Context: **view, edit, embed**\n| ```content``` <br/> object | The content for the object. <br/>Context: **view, edit**\n|```author``` <br/> integer | The ID for the author of the object<br/>Context:**view, edit, embed**\n|```excerpt```<br/>object | The exerpt of the object.<br/>Context:**view, edit, embed**\n|```featured_media```<br/>integer | The ID of the featured media for the object<br/>Context: **view, edit, embed**\n|```comment_status```<br/>string | Whether or not comments are open on the object.<br/>Context: **view, edit**<br />One of:**open, closed**\n|```ping_status```<br/>string | Whether or not the object can be pinged.<br/>Context: **open, closed**\n|```format```<br/>string | The format for the object.<br/>Context: **view, edit**<br/>One of: **standard, aside, chat, gallery, link, image, quote, status, video, audio**\n|```meta```<br/>object | Meta fields.<br/>Context: **view, edit**\n|```sticky```<br/>boolean | Whether or not the object should be treated as sticky.<br/>Context: **view, edit**\n|```template```<br/>string | The theme file to use to display the object.<br/>Context: **view, edit**\n|```categories```<br/>array | The terms assigned to the object in the category taxonomy.<br/>Context: **view, edit**\n|```tags```<br/>array | The terms assigned to the object in the post_tag taxonomy.<br/>Context: **view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c0d163ae-ff70-481f-a009-0875ff2c0d7c"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "1d4abbe8-dbbc-4a05-bbeb-17e4f337cd93"
					}
				}
			]
		},
		{
			"name": "Media",
			"item": [
				{
					"name": "List Media ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var mediaNum = parseInt(pm.environment.get(\"mediaNum\"));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of  posts\", () => {",
									"    let actualNum = pm.response.json().length;",
									"    pm.expect(actualNum).to.equal(mediaNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d3aa8225-e7a4-41e7-a107-39e55c30c7f4"
							}
						}
					],
					"id": "9cc3617e-389d-4df9-85f4-ba9ecea94ec9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/media",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"media"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```after```|Limit response to posts published after a given ISO8601 compliant date.\n|```author```|Limit result set to posts assigned to specific authors.\n|```author_exclude```|Ensure result set excludes posts assigned to specific authors.\n|```before```|Limit response to posts published before a given ISO8601 compliant date.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default: **date**<br/>One of: **author, date, id, include, modified, parent, relevance, slug, include_slugs, title**\n|```parent```|Limit result set to items with particular parent IDs.\n|```parent_exclude```|Limit result set to all items except those of a particular parent ID.\n|```slug```|Limit result set to posts with one or more specific slugs.\n|```status```|Limit result set to posts assigned one or more statuses.<br/>Default: **inherit**\n|```media_type```|Limit result set to attachments of a particular media type.<br/>One of: **image, video, audio, application**\n|```mime_type```|Limit result set to attachments of a particular MIME type."
					},
					"response": []
				},
				{
					"name": "Create a Media item ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"mediaId\", response.id);",
									"",
									"pm.test(\"response is created\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "682d699e-b8b0-4738-a604-ee31f76d84d9"
							}
						}
					],
					"id": "e3d68be3-dc05-484c-b890-e2fa3121ac64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Disposition",
								"name": "Content-Type",
								"value": "form-data; filename=\"test_funny.jpg\"",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "image/jpeg",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "test-file",
									"value": "{{file}}",
									"description": "some test param",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/media",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"media"
							]
						},
						"description": "|||\n|:--|:--\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```title```|The title for the object.\n|```author```|The ID for the author of the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```meta```|Meta fields.\n|```template```|The theme file to use to display the object.\n|```alt_text```|Alternative text to display when attachment is not displayed.\n|```caption```|The attachment caption.\n|```description```|The attachment description.\n|```post```|The ID for the associated post of the attachment.\n\n\nMultiple different ways to do this. The way I illustrate here is:\n\nSet the ```Content-Type``` to the image file type. \nSet ```Content-Disposition``` to ```form-data;filename=\"YOUR-FILENAME.FILE_TYPE\"\nSet the binary to the file you wish to upload."
					},
					"response": []
				},
				{
					"name": "Retrieve a Media item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let mediaId = pm.environment.get(\"mediaId\");",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"media id is correct\", () => {",
									"    pm.expect(response.id).to.be.equal(mediaId);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "484cb888-21af-4b58-a816-b967ba656017"
							}
						}
					],
					"id": "07d72cb8-b478-4063-b908-ef569fef8212",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/media/{{mediaId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"media",
								"{{mediaId}}"
							]
						},
						"description": "|||\n|:--|:--\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Update a Media item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let mediaId = pm.environment.get(\"mediaId\");",
									"let slug = pm.environment.get(\"slug\");",
									"let caption = pm.environment.get(\"caption\");",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"media id is correct\", () => {",
									"    pm.expect(response.id).to.be.equal(mediaId);",
									"});",
									"",
									"pm.test(\"media caption is updated\", () => {",
									"    pm.expect(response.caption.raw).to.be.equal(caption);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f0c83c73-90ab-419c-a153-1bbce4f433e7"
							}
						}
					],
					"id": "4df6634f-ec0e-4129-8b6f-a40071aa3eba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/media/{{mediaId}}?caption={{caption}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"media",
								"{{mediaId}}"
							],
							"query": [
								{
									"key": "caption",
									"value": "{{caption}}"
								}
							]
						},
						"description": "|||\n|:--|:--\n|```id```|Unique identifier for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```title```|The title for the object.\n|```author```|The ID for the author of the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```meta```|Meta fields.\n|```template```|The theme file to use to display the object.\n|```alt_text```|Alternative text to display when attachment is not displayed.\n|```caption```|The attachment caption.\n|```description```|The attachment description.\n|```post```|The ID for the associated post of the attachment."
					},
					"response": []
				},
				{
					"name": "Delete a Media item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let mediaId = pm.environment.get(\"mediaId\");",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Deleted set as true\",() => {",
									"    pm.expect(response.deleted).to.be.equal('true');",
									"});",
									"",
									"pm.test(\"correct media id is deleted\", () => {",
									"    pm.expect(response.id).to.be.equal(mediaId);",
									"});"
								],
								"type": "text/javascript",
								"id": "1d3c14af-f273-4b31-9f8f-d030e6c5fa84"
							}
						}
					],
					"id": "c255bd6a-ca88-49e0-8635-e53c072385a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "image/jpeg",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/media/{{mediaId}}?force=1",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"media",
								"{{mediaId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "1"
								}
							]
						},
						"description": "|||\n|:--|:--\n|```id```|Unique identifier for the object.\n|```force```|Whether to bypass trash and force deletion."
					},
					"response": []
				}
			],
			"id": "2947aa9f-686a-42d0-a9f2-94cef6aae9c6",
			"description": "|||\n|:---|:---\n|```date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, as GMT.<br/>Context: **view, edit**\n|```guid```<br/>object<br/>The globally unique identifier for the object.<br/>Read only<br/>Context: **view, edit**\n|```id```<br/>integer|Unique identifier for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```link```<br/>string,uri|URL to the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```modified```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, in the site's timezone.<br/>Read only<br/>Context: **view, edit**\n|```modified_gmt```<br/>string,<b/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, as GMT.<br/>Read only<br/>Context: **view, edit**\n|```slug```</br>string|An alphanumeric identifier for the object unique to its type.<br/>Context: **view, edit, embed**\n|```status```<br/>string|A named status for the object.<br/>Context: **view, edit**<br/>One of: **publish, future, draft, pending, private**\n|```type```<br/>string|Type of Post for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```permalink_template```<br/>string|Permalink template for the object.<br/>Read only<br/>Context: **edit**\n|```generated_slug```<br/>string|Slug automatically generated from the object title.<br/>Read only<br/>Context: **edit**\n|```title```<br/>object|The title for the object.<br/>Context: **view, edit, embed**\n|```author```<br/>integer|The ID for the author of the object.<br/>Context: **view, edit, embed**\n|```comment_status```</br>string|Whether or not comments are open on the object.<br/>Context: **view, edit**<br/>One of: **open, closed**\n|```ping_status```<br/>string|Whether or not the object can be pinged.<br/>Context: **view, edit**<br/>One of: **open, closed**\n|```meta```<br/>object|Meta fields.<br/>Context: **view, edit**\n|```template```<br/>string|The theme file to use to display the object.<br/>Context: **view, edit**\n|```alt_text```<br/>string|Alternative text to display when attachment is not displayed.<br/>Context: **view, edit, embed**\n|```caption```<br/>object|The attachment caption.<br/>Context: **view, edit, embed**\n|```description```<br/>object|The attachment description.<br/>Context: **view, edit**\n|```media_type```<br/>string|Attachment type.<br/>Read only<br/>Context: **view, edit, embed**<br/>One of: **image, file**\n|```mime_type```<br/>string|The attachment MIME type.<br/>Read only<br/>Context: **view, edit, embed**\n|```media_details```<br/>object|Details about the media file, specific to its type.<br/>Read only<br/>Context: **view, edit, embed**\n|```post```<br/>integer|The ID for the associated post of the attachment.<br/>Context: **view, edit**\n|```source_url```<br/>string, uri|URL to the original attachment file.<br/>Read only<br/>Context: **view, edit, embed**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "04cd3f1a-15b8-41ea-88b3-1ff810e9b0ba"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "022eaeb9-7e2a-4e5a-815b-f179d467acae"
					}
				}
			]
		},
		{
			"name": "Pages",
			"item": [
				{
					"name": "List Pages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var pagesNum = parseInt(pm.environment.get(\"pagesNum\"));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of  pages\", () => {",
									"    let actualNum = pm.response.json().length;",
									"    pm.expect(actualNum).to.equal(pagesNum);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "27938b94-aaef-4dc8-b2b3-c0970b8fb310"
							}
						}
					],
					"id": "7f467ed9-1bd9-42d8-b085-bac1c4dd33ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/pages",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"pages"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|\tScope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```after```|Limit response to posts published after a given ISO8601 compliant date.\n|```author```|Limit result set to posts assigned to specific authors.\n|```author_exclude```|Ensure result set excludes posts assigned to specific authors.\n|```efore```|Limit response to posts published before a given ISO8601 compliant date.\n|```exclude```|Ensure result set excludes specific IDs.\ninclude\tLimit result set to specific IDs.\n|```menu_order```|Limit result set to posts with a specific menu_order value.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default: **date**<br/>One of: **author, date, id, include, modified, parent, relevance, slug, include_slugs, title, menu_order**\n|```parent```|Limit result set to items with particular parent IDs.\n|```parent_exclude```|Limit result set to all items except those of a particular parent ID.\n|```slug```|Limit result set to posts with one or more specific slugs.\n|```status```|Limit result set to posts assigned one or more statuses.<br/>Default: **publish**"
					},
					"response": []
				},
				{
					"name": "Create a Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let excerpt = pm.environment.get('excerpt');",
									"let content = pm.environment.get('content');",
									"pm.environment.set(\"pageId\", response.id);",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(pm.response.json().title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Excerpt is correct\", () => {",
									"    pm.expect(pm.response.json().excerpt.raw).to.equal(excerpt);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(pm.response.json().content.raw).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "4afcbc20-9869-4199-bf64-2e0f7fc81401"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"title\", \"Test WAPI Page Title\");",
									"pm.environment.set(\"content\", \"Test WAPI Page Content\");",
									"pm.environment.set(\"excerpt\", \"Test WAPI Page Excerpt\");"
								],
								"type": "text/javascript",
								"id": "37ea32d1-879b-4bc9-bf70-f5fc3f869bfc"
							}
						}
					],
					"id": "38681df6-878b-48bb-9fdc-c97d97a8dc0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/pages?content={{content}}&title={{title}}&excerpt={{excerpt}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"pages"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "title",
									"value": "{{title}}"
								},
								{
									"key": "excerpt",
									"value": "{{excerpt}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```parent```|The ID for the parent of the object.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```author```|The ID for the author of the object.\n|```excerpt```|The excerpt for the object.\n|```featured_media```|The ID of the featured media for the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```menu_order```|The order of the object in relation to other object of its type.\n|```meta```|Meta fields.\n|```template```|The theme file to use to display the object."
					},
					"response": []
				},
				{
					"name": "Retrieve a Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let content = pm.environment.get('content');",
									"let excerpt = pm.environment.get('excerpt');",
									"let pageId = pm.environment.get(\"pageId\");",
									"",
									"pm.test(\"Page is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(pageId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.rendered).to.equal(title);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "864e6a13-3393-4286-9c02-1beee3576857"
							}
						}
					],
					"id": "c4e4e821-1a64-44d3-8a6a-33932c945bab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/pages/{{pageId}}\n",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"pages",
								"{{pageId}}\n"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```password```|The password for the post if it is password protected."
					},
					"response": []
				},
				{
					"name": "Update a Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let title = pm.environment.get('title');",
									"let excerpt = pm.environment.get('excerpt');",
									"let content = pm.environment.get('content');",
									"let pageId = pm.environment.get(\"pageId\");",
									"",
									"pm.test(\"Page is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(pageId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Excerpt is correct\", () => {",
									"    pm.expect(response.excerpt.raw).to.equal(excerpt);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(response.content.raw).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "8924cc4c-a3df-4bee-ab9e-757c9da5d8c5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"title\", \"Test WAPI Page Title Updated\");",
									"pm.environment.set(\"content\", \"Test WAPI Page Content Updated\");",
									"pm.environment.set(\"excerpt\", \"Test WAPI Page Excerpt Updated\");"
								],
								"type": "text/javascript",
								"id": "bc9931e3-1dd9-4675-8f79-993a53dccf49"
							}
						}
					],
					"id": "470ef84c-6d75-4e10-9a34-1166e0b9d723",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/pages/{{pageId}}?title={{title}}&content={{content}}&excerpt={{excerpt}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"pages",
								"{{pageId}}"
							],
							"query": [
								{
									"key": "title",
									"value": "{{title}}"
								},
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "excerpt",
									"value": "{{excerpt}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```parent```|The ID for the parent of the object.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```author```|The ID for the author of the object.\n|```excerpt```|The excerpt for the object.\n|```featured_media```|The ID of the featured media for the object.\n|```comment_status```|Whether or not comments are open on the object.<br/>One of: **open, closed**\n|```ping_status```|Whether or not the object can be pinged.<br/>One of: **open, closed**\n|```menu_order```|The order of the object in relation to other object of its type.\n|```meta```|Meta fields.\n|```template```|The theme file to use to display the object."
					},
					"response": []
				},
				{
					"name": "Delete a Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let pageId = pm.environment.get(\"pageId\");",
									"",
									"",
									"pm.test(\"Page is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(pageId);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "aeae3948-3589-4c07-b091-c4737ff3f8a6"
							}
						}
					],
					"id": "5d16ebbf-8117-4b80-ad5e-5a86a878ac62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/pages/{{pageId}}\n",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"pages",
								"{{pageId}}\n"
							]
						},
						"description": "|||\n|:--|:--\n|```id```|Unique identifier for the object.\n|```force```|Whether to bypass trash and force deletion.\n"
					},
					"response": []
				}
			],
			"id": "2780c1f1-d70a-4c92-81a7-a8003506b546",
			"description": "|||\n|:---|:---\n|```date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, as GMT.<br/>Context: **view, edit**\n|```guid```<br/>object|The globally unique identifier for the object.<br/>Read only<br/>Context: **view, edit**\n|```id```<br/>integer|Unique identifier for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```link```<br/>string,uri|URL to the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```modified```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))\nThe date the object was last modified, in the site's timezone.<br/>Read only<br/>Context: **view, edit**\n|```modified_gmt```<br/>string,<br/>\ndatetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, as GMT.<br/>Read only<br/>Context: **view, edit**\n|```slug```<br/>string|An alphanumeric identifier for the object unique to its type.<br/>Context: **view, edit, embed**\n|```status```<br/>string|A named status for the object.<br/>Context: **view, edit**<br/>One of: **publish, future, draft, pending, private**\n|```type```<br/>string|Type of Post for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```password```<br/>string|A password to protect access to the content and excerpt.<br/>Context: **edit**\n|```permalink_template```<br/>string|Permalink template for the object.<br/>Read only<br/>Context: **edit**\n|```generated_slug```<br/>string|Slug automatically generated from the object title.<br/>Read only<br/>Context: **edit**\n|```parent```<br/>integer|The ID for the parent of the object.<br/>Context: **view, edit**\n|```title``<br/>object|The title for the object.<br/>Context: **view, edit, embed**\n|```content```<br/>object|The content for the object.<br/>Context: **view, edit**\n|```author```<br/>integer|The ID for the author of the object.<br/>Context: **view, edit, embed**\n|```excerpt```<br/>object|The excerpt for the object.<br/>Context: **view, edit, embed**\n|```featured_media```<br/>integer|The ID of the featured media for the object.<br/>Context: **view, edit, embed**\n|```comment_status```<br/>string|Whether or not comments are open on the object.<br/>Context: **view, edit**<br/>One of: **open, closed**\n|```ping_status```<br/>string|Whether or not the object can be pinged.<br/>Context: **view, edit**<br/>One of: **open, closed**\n|```menu_order```<br/>integer|The order of the object in relation to other object of its type.<br/>Context: **view, edit**\n|```meta```<br/>object|Meta fields.<br/>Context: **view, edit**\n|```template```<br/>string|The theme file to use to display the object.<br/>Context: **view, edit**\n\n\n\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d07ecab8-1447-468f-b9a7-816852862412"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "aeef486d-13dd-4b08-aa4b-ef18fad95e4b"
					}
				}
			]
		},
		{
			"name": "Themes",
			"item": [
				{
					"name": "List Themes ",
					"id": "aa07812d-3370-445c-988f-df82d70f5772",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/themes?status={{themeStatus}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"themes"
							],
							"query": [
								{
									"key": "status",
									"value": "{{themeStatus}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```status```|Limit result set to themes assigned one or more statuses.<br/>Required: **1**\n|```context```|Scope under which the request is made; determines fields present in response.\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string."
					},
					"response": []
				}
			],
			"id": "362d8ed4-7496-48e9-b6f6-8de04f8cd35d",
			"description": "|||\n|:--|:--\n|```theme_supports```<br/>array|Features supported by this theme.<br/>Read only\n\n\nhttps://developer.wordpress.org/cli/commands/theme/status/\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "982a3048-8bb6-4e71-bb84-beceef7464ef"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8dd29933-44c0-4bf3-85b3-4cb6d410dc28"
					}
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "List Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var tagsNum = pm.environment.get('tagNum');",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of tags\", () => {",
									"    let actualNum = pm.response.length;",
									"    pm.expect(actualNum).to.equal(tagsNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0decdd56-828a-42ab-8f38-1272ace4ee03"
							}
						}
					],
					"id": "035d2ec2-17a5-4e16-ae3e-77424968ffb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/tags",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"tags"
							]
						},
						"description": "|||\n|:--|:---\n|```context```|Scope under which the request is made;determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **asc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by term attribute.<br/>Default: **name**<br/>One of: **id, include, name, slug, include_slugs, term_group, description, count**\n|```hide_empty```|Whether to hide terms not assigned to any posts.\n|```post```|Limit result set to terms assigned to a specific post.\n|```slug```|Limit result set to terms with one or more specific slugs.\n"
					},
					"response": []
				},
				{
					"name": "Create a Tag ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('test-tag', 'test');"
								],
								"type": "text/javascript",
								"id": "e9ac24f2-8915-41e9-9ac6-5bf60349a2fe"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let tagName = pm.environment.get('test-tag');",
									"pm.environment.set('tagId', response.id);",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Tag added\",() => {",
									"    pm.expect(response.name).to.be.equal(tagName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ee1923d9-6287-4ed7-ba29-ea958bbc9958"
							}
						}
					],
					"id": "8ab23762-8587-4bd1-a36d-cd0ee7f79216",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/tags?name={{test-tag}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"tags"
							],
							"query": [
								{
									"key": "name",
									"value": "{{test-tag}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```description```|HTML description of the term.\n|```name```|HTML title for the term.<br/>Required: **1**\n|```slug```|An alphanumeric identifier for the term unique to its type.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Retrieve a Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let tagId = parseInt(pm.environment.get(\"tagId\"));",
									"let tagName = pm.environment.get(\"test-tag\");",
									"",
									"pm.test(\"Tag is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(tagId);",
									"});",
									"",
									"pm.test(\"Name is correct\", () => {",
									"    pm.expect(response.name).to.equal(tagName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1a3a7ff8-6847-4e77-980b-5b71f963f7cf"
							}
						}
					],
					"id": "9ae8671a-a7aa-4419-8e6d-46e7e85d7b26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/tags/{{tagId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"tags",
								"{{tagId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```context```|Scope under which the request is made; |```determines```|fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Update a Tag ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('test-tag', 'updated-name');"
								],
								"type": "text/javascript",
								"id": "d798eef1-41fe-4918-ada2-96cd0142afaa"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let tagName = pm.environment.get('test-tag');",
									"let tagId = parseInt(pm.environment.get(\"tagId\"));",
									"",
									"pm.test(\"Tag is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(tagId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.name).to.equal(tagName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ff55b7cb-0470-4968-b10f-dab134c86de9"
							}
						}
					],
					"id": "88ff1265-2ba6-498d-81c6-6f48d9b205a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/tags/{{tagId}}?name={{test-tag}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"tags",
								"{{tagId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{test-tag}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```description```|HTML description of the term.\n|```name```|HTML title for the term.\n|```slug```|An alphanumeric identifier for the term unique to its type.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Delete a Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let tagId = parseInt(pm.environment.get(\"tagId\"));",
									"",
									"",
									"pm.test(\"Tag is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.previous.id).to.equal(tagId);",
									"});"
								],
								"type": "text/javascript",
								"id": "f62625bd-65ec-4d51-a388-49644a5607a8"
							}
						}
					],
					"id": "18101b0d-e9d4-4e41-ae01-52349498a2dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/tags/{{tagId}}?force=1",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"tags",
								"{{tagId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "1"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```force```|Required to be true, as terms do not support trashing.\n"
					},
					"response": []
				}
			],
			"id": "14218047-9721-464e-83e6-5033efc1f367",
			"description": "|||\n|:--|:--\n|```id```<br/>integer|Unique identifier for the term.<br/>Read only<br/>Context: **view, embed, edit**\n|```count```<br/>integer|Number of published posts for the term.<br/>Read only<br/>Context: **view, edit**\n|```description```<br/>string|HTML description of the term.<br/>Context: **view, edit**\n|```link```<br/>string,uri|URL of the term.<br/>Read only<br/>Context: **view, embed, edit**\n|```name```<br/>string|HTML title for the term.<br/>Context: **view, embed, edit**\n|```slug```<br/>string|An alphanumeric identifier for the term unique to its type.<br/>Context: **view, embed, edit**\n|```taxonomy```<br/>string|Type attribution for the term.<br/>Read only<br/>Context: **view, embed, edit**<br/>One of: **category, post_tag, nav_menu, link_category, post_format**\n|```meta```<br/>object|Meta fields.<br/>Context: **view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "4dad3da7-4f6c-4403-9123-3cd779346770"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ba71687b-19ff-47f2-81ca-34a09674d2bd"
					}
				}
			]
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "List Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c9dc814a-0317-4bdc-b587-0a76cfe957b8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dbb0a725-f784-4fac-b7ac-374f815c7205"
							}
						}
					],
					"id": "d575308d-9032-4a05-b0b9-e893089e8a26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/types",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"types"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Retrieve a Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a8269368-a67a-43b2-8070-c4111dd4fbce"
							}
						}
					],
					"id": "b44d44f5-9582-47db-97a5-96151f1212e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/types/{{typeId}}?type={{type}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"types",
								"{{typeId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "{{type}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```type```|An alphanumeric identifier for the post type.<br/> Required:**1**\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				}
			],
			"id": "908d4fde-d7a9-43a4-bdbe-19a45e91d183",
			"description": "|||\n|:--|:---\n|```capabilities```<br/>object|All capabilities used by the post type.<br/>Read only<br/>Context: **edit**\n|```description```<br/>string|A human-readable description of the post type.<br/>Read only<br/>Context: **view, edit**\n|```hierarchical``<br/>boolean|Whether or not the post type should have children.<br/>Read only<br/>Context: **view, edit**\n|```viewable```<br/>boolean|Whether or not the post type can be viewed.<br/>Read only<br/>Context: **edit**\n|```labels```object|Human-readable labels for the post type for various contexts.<br/>Read only<br/>Context: **edit**\n|```name```<br/>string|The title for the post type.<br/>Read only<br/>Context: **view, edit, embed**\n|```slug```<br/>string|An alphanumeric identifier for the post type.<br/>Read only<br/>Context: **view, edit, embed**\n|```supports```<br/>object|All features, supported by the post type.<br/>Read only<br/>Context: **edit**\n|```taxonomies```<br/>array|Taxonomies associated with post type.<br/>Read only<br/>Context: **view, edit**\n|```rest_base```string|REST base route for the post type.<br/>Read only<br/>Context: **view, edit, embed**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "05366935-96c6-4a65-849a-673ca2c4354e"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "105293c1-1dc4-4afd-8edc-a10d6f27246a"
					}
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var catgoriesNum = pm.environment.get('catgoriesNum');",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of catgories\", () => {",
									"    let actualNum = pm.response.length;",
									"    pm.expect(actualNum).to.equal(catgoriesNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "36124ee3-2372-4c5c-a1e0-371a4305c6f9"
							}
						}
					],
					"id": "c5081f2f-9de7-4c47-9f00-5894d0dc58e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/categories",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"categories"
							]
						},
						"description": "|||\n|:--|:--\n|```context```|Scope under which the request is made;determines fields present in response.\n<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **asc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by term attribute.<br/>Default: **name**<br/>One of: **id, include, name, slug, include_slugs, term_group, description, count**\n|```hide_empty```|Whether to hide terms not assigned to any posts.\n|```parent```|Limit result set to terms assigned to a specific parent.\n|```post```|Limit result set to terms assigned to a specific post.\n|```slug```|Limit result set to terms with one or more specific slugs."
					},
					"response": []
				},
				{
					"name": "Create a category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('categoriesName','Category TEST');"
								],
								"type": "text/javascript",
								"id": "d57c1ef1-42fe-4e8a-a362-ae71d08a0080"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let categoriesName = pm.environment.get('categoriesName');",
									"pm.environment.set('categoriesId', response.id);",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Category added\",() => {",
									"    pm.expect(response.name).to.be.equal(categoriesName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "fbd425fc-40fe-458b-8a77-e76f591db05f"
							}
						}
					],
					"id": "a82fc7c7-1100-4f52-b26a-5002aaf07505",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/categories?name={{categoriesName}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"categories"
							],
							"query": [
								{
									"key": "name",
									"value": "{{categoriesName}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```description```|HTML description of the term.\n|```name```|HTML title for the term.<br/>Required: **1**\n|```slug```|An alphanumeric identifier for the term unique to its type.\n|```parent```|The parent term ID.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Retrieve a Category ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let categoriesId = parseInt(pm.environment.get(\"categoriesId\"));",
									"let categoriesName = pm.environment.get(\"categoriesName\");",
									"",
									"pm.test(\"Category is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(categoriesId);",
									"});",
									"",
									"pm.test(\"Name is correct\", () => {",
									"    pm.expect(response.name).to.equal(categoriesName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a4b5128a-3e31-4f6b-aaf1-ae67014e216e"
							}
						}
					],
					"id": "08dd8f5d-e474-45cb-bce5-9905d6b56eb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/categories/{{categoriesId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"categories",
								"{{categoriesId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Update a Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('categoriesName', 'Categories UPDATE');"
								],
								"type": "text/javascript",
								"id": "ca14a44a-99bd-4ee1-a9e2-f0cf858564ad"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let categoriesName = pm.environment.get('categoriesName');",
									"let categoriesId = parseInt(pm.environment.get(\"categoriesId\"));",
									"",
									"pm.test(\"Category is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(categoriesId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.name).to.equal(categoriesName);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "de820ea3-dd53-43af-ad6b-bab435468120"
							}
						}
					],
					"id": "f3483cbe-620a-473a-b7d8-80ebf93fbc08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/categories/{{categoriesId}}?name={{categoriesName}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"categories",
								"{{categoriesId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{categoriesName}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```description```|HTML description of the term.\n|```name```|HTML title for the term.\n|```slug```|An alphanumeric identifier for the term unique to its type.\n|```parent```|The parent term ID.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Delete a Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let categoriesId = parseInt(pm.environment.get(\"categoriesId\"));",
									"",
									"",
									"pm.test(\"Category is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.previous.id).to.equal(categoriesId);",
									"});"
								],
								"type": "text/javascript",
								"id": "afa1c258-2056-47e7-a4a2-aba1bc181431"
							}
						}
					],
					"id": "3862438a-ca31-4662-bcdb-e6d0afd9e3fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/categories/{{categoriesId}}?force=1",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"categories",
								"{{categoriesId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "1"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the term.\n|```force```|Required to be true, as terms do not support trashing.\n"
					},
					"response": []
				}
			],
			"id": "68385253-d33b-4e43-bf17-2abcd42c2ee6",
			"description": "|||\n|:---|:---\n|```id```<br/>integer|Unique identifier for the term.<br/>Read only<br/>Context: **view, embed, edit**\n|```count```<br/>integer|Number of published posts for the term.<br/>Read only<br/>Context: **view, edit**\n|```description```<br/>string|HTML description of the term.<br/>Context: **view, edit**\n|```link```<br/>string,uri<br/>|URL of the term.<br/>Read only<br/>Context: **view, embed, edit**\n|```name```<br/>string|HTML title for the term.<br/>Context: **view, embed, edit**\n|```slug```<br/>string|An alphanumeric identifier for the term unique to its type.<br/>Context: **view, embed, edit**\n|```taxonomy```<br/>string|Type attribution for the term.<br/>Read only<br/>Context: **view, embed, edit**<br/>One of: **category, post_tag, nav_menu, link_category, post_format**\n|```parent```<br/>integer|The parent term ID.<br/>Context: **view, edit**\n|```meta``<br/>object|Meta fields.<br/>Context: **view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "868b69c5-9ac5-49f1-908d-bfbc342504cd"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "849655b2-75e9-4da2-b57a-b5f3a64ce54f"
					}
				}
			]
		},
		{
			"name": "Taxonomies",
			"item": [
				{
					"name": "Retrieve a Taxonomy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var taxonomyNum = parseInt(pm.environment.get('taxonomyNum'));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of tags\", () => {",
									"    let actualNum = Object.keys(pm.response.json()).length;",
									"    pm.expect(actualNum).to.equal(taxonomyNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f5bbed93-8822-4f09-92b4-e57c5fc0504f"
							}
						}
					],
					"id": "f80e8ac5-1cfb-40dd-8522-2870a41ffda0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/taxonomies",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"taxonomies"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```type```|Limit results to taxonomies associated with a specific post type.\n"
					},
					"response": []
				},
				{
					"name": "Retrieve a Taxonomy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let taxonomy = pm.environment.get(\"taxonomy\");",
									"",
									"pm.test(\"Taxonomy is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a0a854b6-029a-4559-a53e-c686f07aa339"
							}
						}
					],
					"id": "46a35b05-6f26-462a-b80e-14d98bbeffda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{newToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/taxonomies/{{taxonomy}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"taxonomies",
								"{{taxonomy}}"
							]
						},
						"description": "|||\n|:--|:--\n|```taxonomy```|An alphanumeric identifier for the taxonomy.\n|```context```|Scope under which the request is made; determines fields present in response.<bvr/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				}
			],
			"id": "e1c2dadc-9f41-4d2d-8705-0abb6f9bea09",
			"description": "|||\n|:---|:---\n|```capabilities```<br/>object|All capabilities used by the taxonomy.<br/>Read only<br/>Context: **edit**\n|```description```</br>string|A human-readable description of the taxonomy.<br/>Read only<br/>Context: **view, edit**\n|```hierarchical```<br/>boolean|Whether or not the taxonomy should have children.<br/>Read only<br/>Context: **view, edit**\n|```labels```<br/>object|Human-readable labels for the taxonomy for various contexts.<br/>Read only<br/>Context: **edit**\n|```name```<br/>string|The title for the taxonomy.<br/>Read only<br/>Context: **view, edit, embed**\n|```slug```<br/>string|An alphanumeric identifier for the taxonomy.<br/>Read only<br/>Context: **view, edit, embed**\n|```show_cloud```<br/>boolean|Whether or not the term cloud should be displayed.<br/>Read only<br/>Context: **edit**\n|```types```<br/>array|Types associated with the taxonomy.<br/>Read only<br/>Context: **view, edit**\n|```rest_base```<br/>string|REST base route for the taxonomy.<br/>Read only<br/>Context: **view, edit, embed**\n|```visibility```<br/>object|The visibility settings for the taxonomy.<br/>Read only<br/>Context: **edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e74f2789-0ed8-4315-ba30-ea51dc0b0845"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "b8c30c02-c4cb-45e4-83d9-d683cc16d3f1"
					}
				}
			]
		},
		{
			"name": "Statuses",
			"item": [
				{
					"name": "Retrieve a Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var taxonomyNum = parseInt(pm.environment.get('taxonomyNum'));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response has proper amount of tags\", () => {",
									"    let actualNum = Object.keys(pm.response.json()).length;",
									"    pm.expect(actualNum).to.equal(taxonomyNum);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "81a85386-be10-4a44-8906-68561dc73142"
							}
						}
					],
					"id": "f37f578c-27de-4aff-85cd-f9b8b9de0ce4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/statuses",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"statuses"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, ed**"
					},
					"response": []
				},
				{
					"name": "Retrieve a Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let taxonomy = pm.environment.get(\"taxonomy\");",
									"",
									"pm.test(\"Taxonomy is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "6521dd91-4ff2-4d12-9682-b8827e9acffb"
							}
						}
					],
					"id": "ddd4720a-b380-444b-8b18-b7e63138fc51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/statuses/{{statusId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"statuses",
								"{{statusId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```status```|An alphanumeric identifier for the status.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				}
			],
			"id": "cb55a1a9-7276-4c51-b027-df058555000d",
			"description": "|||\n|:---|:---\n|||\n|```name```<br/>string|The title for the status.<br/>Read only<br/>Context: **embed, view, edit**\n|```private```<br/>boolean|Whether posts with this status should be private.<br/>Read only<br/>Context: **edit**\n|```protected```<br/>boolean|Whether posts with this status should be protected.<br/>Read only<br/>Context: **edit**\n|```public```<br/>boolean|Whether posts of this status should be shown in the front end of the site.<br/>Read only<br/>Context: **view, edit**\n|```queryable```<br/>boolean|Whether posts with this status should be publicly-queryable.<br/>Read only<br/>Context: **view, edit**\n|```show_in_list```<br/>boolean|Whether to include posts in the edit listing for their post type.<br/>Read only<br/>Context: **edit**\n|```slug```<br/>string|An alphanumeric identifier for the status.<br/>Read only<br/>Context: **embed, view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2fc0d2a9-8ec9-4910-adc3-a56e01634fc8"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "0ec8276e-524f-4fcc-baaa-9bc234ad9123"
					}
				}
			]
		},
		{
			"name": "Search Results",
			"item": [
				{
					"name": "List Search-results",
					"id": "be1b9ba2-7ee4-420f-a262-7147e5091ddb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/search",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"search"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```type```|Limit results to items of an object type.<br/>Default: **post**<br/>One of: **post**\n|```subtype```|Limit results to items of one or more object subtypes.<br/>Default: **any**"
					},
					"response": []
				}
			],
			"id": "52c3a08f-e2e5-4f36-9429-930c1833824f",
			"description": "|||\n|:---|:---\n|```id```<br/>integer|Unique identifier for the object.<br/>Read only<br/>Context: **view, embed**\n|```title```<br/>string|The title for the object.<br/>Read only<br/>Context: **view, embed**\n|```url```<br/>string,uri|URL to the object.<br/>Read only<br/>Context: **view, embed**\n|```type```<br/>string|Object type.<br/>Read only<br/>Context: **view, embed**<br/>One of: **post**\n|```subtype```<br/>string|Object subtype.<br/>Read only<br/>Context: **view, embed**<br/>One of: **post, page**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a163d380-971d-4944-bb9f-b00c820213db"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "48552e48-99cb-47ff-899d-f8cbed1971a4"
					}
				}
			]
		},
		{
			"name": "Blocks",
			"item": [
				{
					"name": "List wp_blocks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var blocksNum = parseInt(pm.environment.get('blocksNum'));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has proper amount of blocks\", () => {",
									"    let actualNum = pm.response.json().length;",
									"    pm.expect(actualNum).to.equal(blocksNum);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d70058ca-8e0a-4060-b238-e790e4a3d42a"
							}
						}
					],
					"id": "6d491c5d-2c56-4179-87c0-56a3f8390474",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks"
							]
						},
						"description": "| | | \n| :--- | :---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```after```|Limit response to posts published after a given ISO8601 compliant date.\n|```before```|Limit response to posts published before a given ISO8601 compliant date.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default: **date**<br/>One of: **author, date, id, include, modified, parent, relevance, slug, include_slugs, title**\n|```slug```|Limit result set to posts with one or more specific slugs.\n|```status```|Limit result set to posts assigned one or more statuses.<br/>Default: **publish**"
					},
					"response": []
				},
				{
					"name": "Create a wp_block ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('content', 'BLOCKS CONTENT');",
									"pm.environment.set('title', 'BLOCKS TITLE');"
								],
								"type": "text/javascript",
								"id": "8f94cdeb-1050-4bff-ad5c-d25dad6ce7da"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let content = pm.environment.get('content');",
									"let title = pm.environment.get('title');",
									"pm.environment.set('blockId', response.id);",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Block content added\",() => {",
									"    pm.expect(response.content.raw).to.be.equal(content);",
									"});",
									"",
									"pm.test(\"Block title added\",() => {",
									"    pm.expect(response.title.raw).to.be.equal(title);",
									"});"
								],
								"type": "text/javascript",
								"id": "8ca7f6c0-7a05-42cc-8ec4-0b09a85fbeb0"
							}
						}
					],
					"id": "0abd6c42-32e2-4aee-864b-0aabe0919cad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks?title={{title}}&content={{content}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks"
							],
							"query": [
								{
									"key": "title",
									"value": "{{title}}"
								},
								{
									"key": "content",
									"value": "{{content}}"
								}
							]
						},
						"description": "| | |\n| :--- | :---\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```template```|The theme file to use to display the object."
					},
					"response": []
				},
				{
					"name": "Updating a wp_block",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('content', 'BLOCK CONTENT UPDATE');",
									"pm.environment.set('title', 'BLOCK TITLE UPDATE');",
									""
								],
								"type": "text/javascript",
								"id": "eca634f5-1b00-42c3-8906-c38378d48bc7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let content = pm.environment.get('content');",
									"let title = pm.environment.get('title');",
									"let blockId = parseInt(pm.environment.get(\"blockId\"));",
									"",
									"pm.test(\"Block is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(blockId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(response.content.raw).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "a460be0e-46c0-4153-ab8a-6156722b7f8b"
							}
						}
					],
					"id": "06c132ea-0ba4-4fa6-ae99-27b0a6a8f6be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks/{{blockId}}?content={{content}}&title={{title}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks",
								"{{blockId}}"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "title",
									"value": "{{title}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```template```|The theme file to use to display the object."
					},
					"response": []
				},
				{
					"name": "Retrieve a wp_block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let blockId = parseInt(pm.environment.get(\"blockId\"));",
									"let content = pm.environment.get(\"content\");",
									"let title = pm.environment.get(\"title\");",
									"",
									"pm.test(\"Block is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(blockId);",
									"});",
									"",
									"pm.test(\"Title is correct\", () => {",
									"    pm.expect(response.title.raw).to.equal(title);",
									"});",
									"",
									"pm.test(\"Content is correct\", () => {",
									"    pm.expect(response.content.raw).to.equal(content);",
									"});"
								],
								"type": "text/javascript",
								"id": "79baa3a6-3757-499c-a9e2-2ad0eded3ef6"
							}
						}
					],
					"id": "ea5eff5b-ba24-47ef-acce-c67a1f6024d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks/{{blockId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks",
								"{{blockId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```password```|The password for the post if it is password protected."
					},
					"response": []
				},
				{
					"name": "Delete a wp_block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let blockId = parseInt(pm.environment.get(\"blockId\"));",
									"",
									"",
									"pm.test(\"Tag is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.previous.id).to.equal(blockId);",
									"});"
								],
								"type": "text/javascript",
								"id": "880cf479-8fa2-4ce3-b3d8-b610b50aae74"
							}
						}
					],
					"id": "7daa3bbc-0ed4-4866-b85a-6454877c2c41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks/{{blockId}}?force=1",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks",
								"{{blockId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "1"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```force```|Whether to bypass trash and force deletion."
					},
					"response": []
				}
			],
			"id": "1edd6596-deb9-459f-a5e8-03d37689170c",
			"description": "|||\n|:---|:---\n|```author```<br/>integer|The ID for the author of the object.<br/>Context: **view, edit, embed**\n|```date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, as GMT.<br/>Context: **view, edit**\n|```guid```<br/>object|The globally unique identifier for the object.<br/>Read only<br/>Context: **view, edit**\n|```id```<br/>integer|Unique identifier for the object.<br/>Context: **view, edit, embed**\n|```modified```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, in the site's timezone.<br/>Context: **view, edit**\n|```modified_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, as GMT.<br/>Context: **view, edit**\n|```parent```<br/>integer|The ID for the parent of the object.<br/>Context: **view, edit, embed**\n|```slug```<br/>string|An alphanumeric identifier for the object unique to its type.<br/>Context: **view, edit, embed**\n|```title```<br/>object|The title for the object.<br/>Context: **view, edit, embed**\n|```content```<br/>object|The content for the object.<br/>Context: **view, edit**\n|```preview_link```<br/>string,uri|Preview link for the post.<br/>Read only<br/>Context: **edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test.skip"
						],
						"id": "2aecac8d-4cd1-468b-99eb-8cd6924bfec3"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a3a129af-838f-4f21-8484-ba4cf4f05fc9"
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "List Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var commentNum = parseInt(pm.environment.get('commentNum'));",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has proper amount of blocks\", () => {",
									"    let actualNum = pm.response.json().length;",
									"    pm.expect(actualNum).to.equal(commentNum);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "10263652-7ca3-42b5-8701-e9cdc6a8ef65"
							}
						}
					],
					"id": "0a614c3c-fa6a-45af-a615-ef2f83a2897f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/comments\n\n",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"comments\n\n"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```after```|Limit response to comments published after a given ISO8601 compliant date.\n|```author```|Limit result set to comments assigned to specific user IDs. Requires authorization.\n|```author_exclude```|Ensure result set excludes comments assigned to specific user IDs. Requires authorization.\n|```author_email```|Limit result set to that from specific author email. Requires authorization.\n|```before```|\tLimit response to comments published before a given ISO8601 compliant date.\n|```exclude```|\tEnsure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default:** date_gmt**<br/>One of: **date, date_gmt, id, include, post, parent, type**\n|```parent```|Limit result set to comments of specific parent IDs.\n|```parent_exclude```|Ensure result set excludes specific parent IDs.\n|```post```|Limit result set to comments assigned to specific post IDs.\n|```status```|Limit result set to comments assigned a specific status. Requires authorization.<br/>Default: **approve**\n|```type```|Limit result set to comments assigned a specific type. Requires authorization.<br/>Default: **comment**\n|```password```|The password for the post if it is password protected."
					},
					"response": []
				},
				{
					"name": "Create a Comment ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let content = pm.environment.get('content');",
									"let author = pm.environment.get('author');",
									"let author_email = pm.environment.get('email');",
									"let post = parseInt(pm.environment.get('commentPostId'));",
									"",
									"pm.environment.set('commentId', response.id);",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Proper post selected\",() => {",
									"    pm.expect(response.post).to.be.equal(post);",
									"});",
									"",
									"pm.test(\"Comment content added\",() => {",
									"    pm.expect(response.content.raw).to.be.equal(content);",
									"});",
									"",
									"pm.test(\"Comment author_name added\",() => {",
									"    pm.expect(response.author_name).to.be.equal(author);",
									"});",
									"",
									"",
									"pm.test(\"Comment author_email added\",() => {",
									"    pm.expect(response.author_email).to.be.equal(author_email);",
									"});"
								],
								"type": "text/javascript",
								"id": "93c2dc81-4dd9-4857-95f7-8c513dcc1a91"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('content',\"This is a test comment\");",
									"pm.environment.set('author',\"WAPI\");",
									"pm.environment.set('email',\"test@test.com\");",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1f87dd63-46d4-42a2-a00f-7b21e45af036"
							}
						}
					],
					"id": "4662f3d9-67cb-43b1-8fed-6f86aea17d42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/comments?post={{commentPostId}}&content={{content}}&author_name={{author}}&author_email={{email}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post",
									"value": "{{commentPostId}}"
								},
								{
									"key": "content",
									"value": "{{content}}"
								},
								{
									"key": "author_name",
									"value": "{{author}}"
								},
								{
									"key": "author_email",
									"value": "{{email}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```post```|The ID of the associated post object.<br/>Required:**1**\n|```content```|The content for the object.<br/>Required:**1**\n|```author```|The ID of the user object, if author was a user.\n|```author_email```|Email address for the object author.\n|```author_ip```|IP address for the object author.\n|```author_name```|Display name for the object author.\n|```author_url```|URL for the object author.\n|```author_user_agent```|User agent for the object author.\n|```content```|The content for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```parent```|The ID for the parent of the object.\n|```status```|State of the object.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Retrieve a Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "da00da73-58cb-4ba5-9a6b-2c840f744bac"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let commentId = parseInt(pm.environment.get(\"commentId\"));",
									"let content = pm.environment.get('content');",
									"let author = pm.environment.get('author');",
									"let post = parseInt(pm.environment.get(\"commentPostId\"));",
									"",
									"pm.test(\"Comment is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(commentId);",
									"});",
									"",
									"pm.test(\"Proper post returned\",() => {",
									"    pm.expect(response.post).to.be.equal(post);",
									"});",
									"",
									"pm.test(\"Comment author_name returned\",() => {",
									"    pm.expect(response.author_name).to.be.equal(author);",
									"});",
									"",
									"pm.test(\"Comment content is there\",() => {",
									"    pm.expect(response.content.rendered).to.exist;",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "fda67b9c-706d-4991-af2a-0501cdb31f48"
							}
						}
					],
					"id": "633fb4da-5157-424e-a261-b1d9a9fe94db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/comments/{{commentId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"comments",
								"{{commentId}}"
							]
						},
						"description": "**Authentication Required**\n\n\n|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present inresponse.<br/>Default:**view**<br/>One of: **view, embed, edit**\n|```password```|The password for the parent post of the comment (if the post is password protected)."
					},
					"response": []
				},
				{
					"name": "Update a Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let content = pm.environment.get('content');",
									"let commentId = parseInt(pm.environment.get(\"commentId\"));",
									"",
									"pm.test(\" is retrieved\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.id).to.equal(commentId);",
									"});",
									"",
									"pm.test(\"Content is updated\", () => {",
									"    pm.expect(response.content.raw).to.equal(content);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9dbf98a4-9de5-4c98-b959-a1dde15616f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('content', 'comment UPDATE');"
								],
								"type": "text/javascript",
								"id": "905a5100-c4a7-4271-92d2-a4ea9883245d"
							}
						}
					],
					"id": "c7004e4b-3676-430d-b79b-048ef5ef74e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}} /wp-json/wp/v2/comments/{{commentId}}?content={{content}}",
							"host": [
								"{{site}} "
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```author```|The ID of the user object, if author was a user.\n|```author_email```|Email address for the object author.\n|```author_ip```|IP address for the object author.\n|```author_name```|Display name for the object author.\n|```author_url```|URL for the object author.\n|```author_user_agent```|User agent for the object author.\n|```content```|The content for the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```parent```|The ID for the parent of the object.\n|```post```|The ID of the associated post object.\n|```status```|State of the object.\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Delete a Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let commentId = parseInt(pm.environment.get(\"commentId\"));",
									"",
									"",
									"pm.test(\"Category is deleted\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Proper id is returned\", () => {",
									"    pm.expect(response.previous.id).to.equal(commentId);",
									"});"
								],
								"type": "text/javascript",
								"id": "8f702dab-99f3-40f1-addf-7bb86ce19711"
							}
						}
					],
					"id": "b213fbc5-51ab-4510-9098-28cf898463a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/comments/{{commentId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"comments",
								"{{commentId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the object.\n|```force```|Whether to bypass trash and force deletion.\n|```password```|The password for the parent post of the comment (if the post is password protected)."
					},
					"response": []
				}
			],
			"id": "ec108fe6-7ba7-494d-8519-0366e42d07f0",
			"description": "|||\n|:---|:---\n|```id```<br/>integer|Unique identifier for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```author```<br/>integer|The ID of the user object, if author was a user.<br/>Context: **view, edit, embed**\n|```author_email```<br/>string,email|Email address for the object author.<br/>Context: **edit**\n|```author_ip```<br/>string,ip|IP address for the object author.<br/>Context: **edit**\n|```author_name```<br/>string|Display name for the object author.<br/>Context: **view, edit, embed**\n|```author_url```<br/>string,uri|URL for the object author.<br/>Context: **view, edit, embed**\n|```author_user_agent```<br/>string|User agent for the object author.<br/>Context: **edit**\n|```content```<br/>object|The content for the object.<br/>Context: **view, edit, embed**\n|```date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, as GMT.<br/>Context: **view, edit**\n|```link```<br/>string,uri|URL to the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```parent```<br/>integer|The ID for the parent of the object.<br/>Context: **view, edit, embed**\n|```post```<br/>integer|The ID of the associated post object.<br/>Context: **view, edit**\n|```status```<br/>string|State of the object.<br/>Context: **view, edit**\n|```type```<br/>string|Type of Comment for the object.<br/>Read only<br/>Context: **view, edit, embed**\n|```author_avatar_urls```<br/>object|Avatar URLs for the object author.<br/>Read only<br/>Context: **view, edit, embed**\n|```meta```|object\tMeta fields.<br/>Context: **view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2b1dbf38-456c-4b2e-84cf-787056865f3f"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "78d1f0ca-5af4-41a3-a574-74806b477373"
					}
				}
			]
		},
		{
			"name": "Block Revisions",
			"item": [
				{
					"name": "Retrieve a wp_block-revision",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "e534287a-ba89-4392-b55f-9531714c7a87"
							}
						}
					],
					"id": "0a84f399-78d3-4234-a087-af6733d29de3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks/{{blockId}}/autosaves?parent={{postId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks",
								"{{blockId}}",
								"autosaves"
							],
							"query": [
								{
									"key": "parent",
									"value": "{{postId}}"
								}
							]
						},
						"description": "|||\n|:---|:---\n|```parent```|The ID for the parent of the object.<br/>Request:**1**\n|```context```|Scope under which the request is made; |```determines```|fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Create a wp_block-revision",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "7f6eae65-1c1f-49d5-a066-45b49f3d0e1b"
							}
						}
					],
					"id": "90aafc71-bfa5-4c26-a366-6aaabfbf1b5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/{{blockId}}/autosaves",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"{{blockId}}",
								"autosaves"
							]
						},
						"description": "|||\n|:--|:--\n|```parent```|The ID for the parent of the object.\n|```date```|The date the object was published, in the site's timezone.\n|```date_gmt```|The date the object was published, as GMT.\n|```slug```|An alphanumeric identifier for the object unique to its type.\n|```status```|A named status for the object.<br/>One of: **publish, future, draft, pending, private**\n|```password```|A password to protect access to the content and excerpt.\n|```title```|The title for the object.\n|```content```|The content for the object.\n|```template```|The theme file to use to display the object."
					},
					"response": []
				},
				{
					"name": "Retrieve a wp_block-revision with parent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "2f6645fe-3f7a-4b4f-bd0b-135bc426fada"
							}
						}
					],
					"id": "e59dc6d9-3d83-4919-8449-0fd2138941dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/blocks/{{parentId}}/autosaves/{{blockId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"blocks",
								"{{parentId}}",
								"autosaves",
								"{{blockId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```parent```|The ID for the parent of the object.\n|```id```|The ID for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				}
			],
			"id": "741d4659-f0c7-4b07-9c8b-62f8c0fdeb99",
			"description": "|||\n|:---|:---\n|```author```<br/>integer|The ID for the author of the object.<br/>Context: **view, edit, embed**\n|```date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|\nThe date the object was published, as GMT.<br/>Context: **view, edit**\n|```guid```<br/>object|The globally unique identifier for the object.<br/>Read only<br/>Context: **view, edit**\n|```id```<br/>integer|Unique identifier for the object.<br/>Context: **view, edit, embed**\n|```modified```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, in the site's timezone.<br/>Context: **view, edit**\n|```modified_gmt```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, as GMT.<br/>Context: **view, edit**\n|```parent```<br/>integer|The ID for the parent of the object.<br/>Context: **view, edit, embed**\n|```slug```<br/>string|An alphanumeric identifier for the object unique to its type.<br/>Context: **view, edit, embed**\n|```title```<br/>object|The title for the object.<br/>Context: **view, edit, embed**\n|```content```<br/>object|The content for the object.<br/>Context: **view, edit**\n|```preview_link```<br/>string,uri|Preview link for the post.<br/>Read only<br/>Context: **edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test.skip"
						],
						"id": "961e3c05-c863-4ef3-84ea-ffb335b7f29a"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a03e522e-7be8-45da-aaa9-0114d2647290"
					}
				}
			]
		},
		{
			"name": "Post Revisions",
			"item": [
				{
					"name": "List Post Revisions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "0ba9e73d-deff-4587-a8ff-bc727748a255"
							}
						}
					],
					"id": "e7d0c2dc-6df0-41bb-bce2-46fa43c30d74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp/v2/posts/{{postId}}/revisions\n\n",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp",
								"v2",
								"posts",
								"{{postId}}",
								"revisions\n\n"
							]
						},
						"description": "| | |\n| :-- | :--\n|```parent``` |The ID for the parent of the object.\n|```context```|\tScope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.\n|```search```|Limit results to those matching a string.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```\t| Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **desc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default: **date**<br/>One of: **date, id, include, relevance, slug, include_slugs, title**"
					},
					"response": []
				},
				{
					"name": "Retrieve a Post-Revision",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "3ddb5a43-0aea-4a63-b771-0f113a129082"
							}
						}
					],
					"id": "d7eea546-27a0-4413-b785-59b1a3cba050",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp/v2/posts/{{parentId}}/revisions/{{revisionId}}\n\n",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp",
								"v2",
								"posts",
								"{{parentId}}",
								"revisions",
								"{{revisionId}}\n\n"
							]
						},
						"description": "| | |\n|:--|:--\n|```parent```|The ID for the parent of the object.\n|```id```|Unique identifier for the object.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Delete a Post-revision",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "5681713f-5135-45f1-99ca-524074f34af5"
							}
						}
					],
					"id": "a1105763-9a2b-45d4-b74e-8b9261c4fc4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp/v2/posts/{{parentId}}/revisions/{{revisionsId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp",
								"v2",
								"posts",
								"{{parentId}}",
								"revisions",
								"{{revisionsId}}"
							]
						},
						"description": "| | |\n| :--- | :-- \n|```parent```|The ID for the parent of the object.\n|```id```|Unique identifier for the object.\n|```force```|Required to be true, as revisions do not support trashing."
					},
					"response": []
				}
			],
			"id": "811b5cdf-8e0c-46e6-ac0f-9809a19f572d",
			"description": "#Schema\nThe schema defines all the fields that exist for a post-revision object.\n\n| | |\n| :-- | :--\n|```author```<br/>integer |\tThe ID for the author of the object.</br>Context: **view, edit, embed**\n|```date```<br/>string,datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, in the site's timezone.<br/>Context: **view, edit, embed**\n|```date_gmt```<br/>string,datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was published, as GMT.<br/>Context: **view, edit**\n|```guid```<br/>object|The globally unique identifier for the object.<br/>Read only<br/>Context: **view, edit**\n|```id```<br/>integer\t|Unique identifier for the object.<br/>Context: **view, edit, embed**\n|```modified```<br/>string,datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, in the site's timezone.<br/>Context: **view, edit**\n|```modified_gmt```<br/>string,datetime ([details](https://core.trac.wordpress.org/ticket/41032))|The date the object was last modified, as GMT.<br/>Context: **view, edit**\n|```parent```<br/>integer|The ID for the parent of the object.<br/>Context: **view, edit, embed**\n|```slug```<br/>string|\tAn alphanumeric identifier for the object unique to its type.<br/>Context: **view, edit, embed**\n|```title```<br/>object\t| The title for the object.<br/>Context: **view, edit, embed**\n|```content```<br/>object |The content for the object.<br/>Context: **view, edit**\n|```excerpt```<br/>object\t| The excerpt for the object.<br/>Context: **view, edit, embed**\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test.skip"
						],
						"id": "1d4ed5ff-b4d1-4455-b964-c10eee3176ec"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2d948cb0-bf55-45bd-aed0-952400e3298d"
					}
				}
			]
		},
		{
			"name": "Block Renderer",
			"item": [
				{
					"name": "Retrieve a Rendered-block",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "49e83b4e-0541-4ef3-bc29-765ae03c766b"
							}
						}
					],
					"id": "085c30c8-dc37-48dc-b122-33bf60ac1bb9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/block-renderer/{{blockName}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"block-renderer",
								"{{blockName}}"
							]
						},
						"description": "|||\n|:---|:---\n|```name```|Unique registered name for the block.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **edit**\n|```attributes```|Attributes for core/tag-cloud block\n|```post_id```|ID of the post context."
					},
					"response": []
				}
			],
			"id": "83824ca1-ad92-4af9-bd72-f0bdd468425b",
			"description": "|||\n|:---|:---\n|```rendered```<br/>string|The rendered block.<br/>Context: **edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test.skip"
						],
						"id": "e1efe399-ce55-4319-990d-5fe156d761a7"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "64089c59-03e1-4462-93b0-0c98e3bf79a2"
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List Users ",
					"id": "5d6ac161-737d-465e-b29c-3f283c232f7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users"
							]
						},
						"description": "|||\n|:--|:--\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**\n|```page```|Current page of the collection.<br/>Default: **1**\n|```per_page```|Maximum number of items to be returned in result set.<br/>Default: **10**\n|```search```|Limit results to those matching a string.\n|```exclude```|Ensure result set excludes specific IDs.\n|```include```|Limit result set to specific IDs.\n|```offset```|Offset the result set by a specific number of items.\n|```order```|Order sort attribute ascending or descending.<br/>Default: **asc**<br/>One of: **asc, desc**\n|```orderby```|Sort collection by object attribute.<br/>Default: **name**<br/>One of: **id, include, name, registered_date, slug, include_slugs, email, url**\n|```slug```|Limit result set to users with one or more specific slugs.\n|```roles```|Limit result set to users matching at least one specific role provided. Accepts csv list or single role.\n|```who```|Limit result set to users who are considered authors.<br/>One of: **authors**"
					},
					"response": []
				},
				{
					"name": "Create a User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "08539733-7820-404f-b08b-c652c4c48104"
							}
						}
					],
					"id": "ac7ab905-053e-48dd-99b3-1af0a7c3ec50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users"
							]
						},
						"description": "|||\n|:---|:---\n|```username```|Login name for the user.<br/>Required: **1**\n|```name```|Display name for the user.\n|```first_name```|First name for the user.\n|```last_name```|Last name for the user.\n|```email```|The email address for the user.<br/>Required: **1**\n|```url```|URL of the user.\n|```description```|Description of the user.\n|```locale```|Locale for the user.<br/>One of: **en_US**\n|```nickname```|The nickname for the user.\n|```slug```|An alphanumeric identifier for the user.\n|```roles```|Roles assigned to the user.\n|```password```|Password for the user (never included).<br/>Required: **1**\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Retrieve a User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "88f8e0b8-a611-4f8a-96a6-3ab973119129"
							}
						}
					],
					"id": "cd39e034-7b74-40c3-8935-13f1c0f4d603",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/{{userId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"{{userId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the user.\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Update a User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "55e2b8b6-a998-4ab7-82e4-b9b33c4708b1"
							}
						}
					],
					"id": "03d537c8-3730-4686-9b1b-d865fffdea43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/{{userId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"{{userId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the user.\n|```username```|Login name for the user.\n|```name```|Display name for the user.\n|```first_name```|First name for the user.\n|```last_name```|Last name for the user.\n|```email```|The email address for the user.\n|```url```|URL of the user.\n|```description```|Description of the user.\n|```locale```|Locale for the user.<br/>One of: **en_US**\n|```nickname```|The nickname for the user.\n|```slug```|An alphanumeric identifier for the user.\n|```roles```|Roles assigned to the user.\n|```password```|Password for the user (never included).\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "b4e9a537-9fdb-485c-92ce-b917d3da8fed"
							}
						}
					],
					"id": "8085d7d5-fd1a-4f96-8478-15d70b37f355",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/{{userId}}",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"{{userId}}"
							]
						},
						"description": "|||\n|:---|:---\n|```id```|Unique identifier for the user.\n|```force```|Required to be true, as users do not support trashing.\n|```reassign```|Reassign the deleted user's posts and links to this user ID.<br/>Required: **1**"
					},
					"response": []
				},
				{
					"name": "Retrieve a Me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "592999c1-5450-4645-acde-2cf1d15d0f3f"
							}
						}
					],
					"id": "1e44a494-c744-4379-985d-8644f7ac66dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/me",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"me"
							]
						},
						"description": "|||\n|:---|:---\n|```context```|Scope under which the request is made; determines fields present in response.<br/>Default: **view**<br/>One of: **view, embed, edit**"
					},
					"response": []
				},
				{
					"name": "Update Me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "bfea8011-662d-416f-a58f-3255fc43e6e7"
							}
						}
					],
					"id": "d69d4da2-7420-4546-9471-f0db79726bde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/me",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"me"
							]
						},
						"description": "|||\n|:---|:---\n|```username```|Login name for the user.\n|```name```|Display name for the user.\n|```first_name```|First name for the user.\n|```last_name```|Last name for the user.\n|```email```|The email address for the user.\n|```url```|URL of the user.\n|```description```|Description of the user.\n|```locale```|Locale for the user.<br/>One of: **en_US**\n|```nickname```|The nickname for the user.\n|```slug```|An alphanumeric identifier for the user.\n|```roles```|Roles assigned to the user.\n|```password```|Password for the user (never included).\n|```meta```|Meta fields."
					},
					"response": []
				},
				{
					"name": "Delete Me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "0806ce09-19ae-4de9-9212-2a504a1331b6"
							}
						}
					],
					"id": "210e76b1-904f-48b8-a8b6-75d7d05aadf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/users/me",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"users",
								"me"
							]
						},
						"description": "|||\n|:---|:---\n|```force```|Required to be true, as users do not support trashing.\n|```reassign```|Reassign the deleted user's posts and links to this user ID.<br/>Required: **1**"
					},
					"response": []
				}
			],
			"id": "f3a1ae70-a1bd-4ccf-a8cc-de582663961b",
			"description": "|||\n|:---|:---\n|```id```<br/>integer|Unique identifier for the user.<br/>Read only<br/>Context: **embed, view, edit**\n|```username```<br/>string|Login name for the user.<br/>Context: **edit**\n|```name```<br/>string|Display name for the user.<br/>Context: **embed, view, edit**\n|```first_name```<br/>string|First name for the user.<br/>Context: **edit**\n|```last_name```<br/>string|Last name for the user.<br/>Context:  **edit**\n|```email```<br/>string,email|The email address for the user.<br/>Context: **edit**\n|```url```<br/>string,uri|URL of the user<br/>Context: **embed, view, edit**\n|```description```|<br/>string|Description of the user.<br/>Context: **embed, view, edit**\n|```link```<br/>string,uri | Author URL of the user.<br/>Read only<br/>Context: **embed, view, edit**\n|```locale```<br/>string|Locale for the user.<br/>Context:  **edit**<br/>One of: **en_US**\n|```nickname```<br/>string|The nickname for the user.<br/>Context: **edit**\n|```slug```<br/>string|An alphanumeric identifier for the user.<br/>Context: **embed, view, edit**\n|```registered_date```<br/>string,<br/>datetime ([details](https://core.trac.wordpress.org/ticket/41032))|Registration date for the user.<br/>Read only<br/>Context: **edit**\n|```roles```<br/>array|Roles assigned to the user.<br/>Context: **edit**\n|```password```<br/>string|Password for the user (never included)\n|```capabilities```<br/>object|All capabilities assigned to the user.<br/>Read only<br/>Context: **edit**\n|```extra_capabilities```<br/>object|Any extra capabilities assigned to the user.<br/>Read only<br>Context: **edit**\n|```avatar_urls```<br/>object|Avatar URLs for the user.<br/>Read only<br/>Context: **embed, view, edit**\n|```meta```<br/>object|Meta fields.<br/>Context: **view, edit**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test.skip"
						],
						"id": "d89966a2-f101-422d-ad72-d010cfb81948"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e086b647-bdd8-4162-bb57-5bc1d9b6a80e"
					}
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Retrieve Site Settings ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"response is ok\",() => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a6766bb7-3686-4a72-b768-355b8693085e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8f084a49-b611-42e7-9b8e-779b42a49248"
							}
						}
					],
					"id": "2bcc90f7-1213-4db5-b79e-c642dbc21555",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "mZbu ThPI bbpv RR4L Asfv v3Ay",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wapi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/settings",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"settings"
							]
						},
						"description": "There are no arguments for this endpoint.\n"
					},
					"response": []
				},
				{
					"name": "Update Site Settings ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.skip.test;"
								],
								"type": "text/javascript",
								"id": "0a1e75a1-5af4-4582-a9e8-a5b3929d412f"
							}
						}
					],
					"id": "b17d3bdc-6505-4ae0-b2d1-7c3d099f0891",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{site}}/wp-json/wp/v2/settings",
							"host": [
								"{{site}}"
							],
							"path": [
								"wp-json",
								"wp",
								"v2",
								"settings"
							]
						},
						"description": "|||\n|:---|:---\n|```title```|Site title.\n|```description```|Site tagline.\n|```timezone```|A city in the same timezone as you.\n|```date_format```|A date format for all date strings.\n|```time_format```|A time format for all time strings.\n|```start_of_week```|A day number of the week that the week should start on.\n|```language```|WordPress locale code.\n|```use_smilies```|Convert emoticons like :-) and :-P to graphics on display.\n|```default_category```|Default post category.\n|```default_post_format```|Default post format.\n|```posts_per_page```|Blog pages show at most.\n|```default_ping_status```|Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.<br/>One of: **open, closed**\n|```default_comment_status```|Allow people to post comments on new articles.<br/>One of: **open, closed**"
					},
					"response": []
				}
			],
			"id": "fcebdf61-fa46-43b3-af34-419590d4135c",
			"description": "|||\n|:---|:---\n|```title```<br/>string|Site title.\n|```description```<br/>string|Site tagline.\n|```timezone```<br/>string|A city in the same timezone as you.\n|```date_format```<br/>string|\tA date format for all date strings.\n|```time_format```<br/>string|A time format for all time strings.\n|```start_of_week```<br/>integer|A day number of the week that the week should start on.\n|```language```<br/>string|WordPress locale code.\n|```use_smilies```<br/>boolean|Convert emoticons like :-) and :-P to graphics on display.\n|```default_category```<br/>integer|Default post category.\n|```default_post_format```<br/>string|Default post format.\n|```posts_per_page```<br/>integer | Blog pages show at most.\n|```default_ping_status```<br/>string|Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.<br/>One of: **open, closed**\n|```default_comment_status```<br/>string|Allow people to post comments on new articles.<br/>One of: **open, closed**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2ffce170-53f0-4254-8b95-50543a64fa5b"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "67de64b3-f881-45e9-a8e9-3fa5b4e4c290"
					}
				}
			]
		},
		{
			"name": "Routes",
			"id": "0478ad68-0df6-445c-a39a-644c5a9c9245",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{site}}/wp-json",
					"host": [
						"{{site}}"
					],
					"path": [
						"wp-json"
					]
				},
				"description": "Returns all the available API routes and endpoints for a Wordpress instance."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "f669c511-8f9b-4e8b-9146-ffb94d756981"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "85a3267c-4381-453c-8b75-68e6b0622ef0"
			}
		}
	]
}